---
title: "Une calculette en HAD"
description: "Un outil simple et rapide pour faire correspondre des GHPC à leur GHT et tarifs"
date: "2023-03-01"
date-modified: last-modified
categories: [HAD, outils, serverless, R]
image: "calculator.jpg"
---

Lors de discussion avec une collègue, nous avons eu besoin d'avoir rapidement de nombreuses combinaisons de MPP MPA IK et d'observer leurs GHT, mais aussi l'inverse : à partir d'un GHT observer les combinaisons possibles de GHPC. 

Les données sont entièrement en libre accès sur le site de l'ATIH :

- [mapping ghpc en ght](https://www.atih.sante.fr/guide-methodologique-had-2022)
- [nomenclature (guide méthodo)](https://www.atih.sante.fr/guide-methodologique-had-2022)
- [tarifs 2022](https://www.atih.sante.fr/tarifs-mco-et-had)

Étonnamment nous n'avions pas, à ma connaissance, d'outil interne qui fasse ce simple croisement de données. C'est l'affaire d'un simple Excel bien entendu mais tout entrainement qui amène à ne pas se servir d'Excel comme outil de publication ou visualisation de données me semble justifié (gif anti excel?)

Je procède en deux temps : d'abord je prepare une table de référence puis je la met en page avec `{flexdashboard}` et `{reactable}`

## Préparation des données

On commence par charger les données :

```r
library(dplyr, warn.conflicts = FALSE)

dta_raw <- readxl::read_excel("data-raw/ghpc_2022.xlsx", sheet = 3)
dta_libs_mps <- readxl::read_excel("data-raw/lib_mps.xlsx")
dta_tarifs <- readxl::read_excel("data-raw/tarifs2022.xlsx")
```

> NB: Pour les libellés de MP j'avais déjà une table dans un package interne ATIH mais elle est construite simplement à partir du guide méthodo. Pour cet exemple j'ai fait une feuille excel avec mp et libellé issus du guide.

Il me faut aussi une table avec les bornes de pondération de GHT pour faire correspondre les pondération de GHPC dans un GHT :

```r
dta_ght <-
    data.frame(
        lower_pond =
            seq(
                from = .57,
                to = 6.57,
                by = .2
            ),
        upper_pond = 
            c(
                seq(
                    from = .77,
                    to = 6.57,
                    by = .2
                ),
                99
            ),
        ght = 1:31
    )

```

Je prépare mes données en renommant les colonnes dans un format plus facile à manier en code : 

```r
dta_select <-
    dta_raw |> 
    select(
        ghpc = GHPC,
        inat = `Association inattendue`,
        mpp = MPP,
        mpa = MPA,
        ik = IK, 
        t1 = `IPT T1`,
        t2 = `IPT T2`,
        t3 = `IPT T3`,
        t4 = `IPT T4`,
    )
```

Je pivote mes données pour un format long car j'anticipe qu'il sera plus facile de les manier comme ça pour filtrer sur les valeurs de tranches de durée de séquence :

```r
dta_pivot <-
    dta_select |> 
    tidyr::pivot_longer(
        cols = c(
            t1,
            t2,
            t3,
            t4
        ),
        names_to = "tranche",
        values_to = "pond"
    ) |> 
    mutate(
        tranche = factor(
            tranche,
            levels = c("t1", "t2", "t3", "t4"),
            labels = c("J1-J4", "J5-J9", "J10-J30", "J31-sortie")
        )
    )
```

Je souhaite aussi avoir une homogénéité dans les valeurs d'IK alors je vais transformer l'ik pour extraire les quelques valeurs double (XX-XX) puis à nouveau pivoter en long

```r
dta_mutateik <-
    dta_pivot |> 
    mutate(
        ik1 = stringr::str_extract(
            string = ik, 
            pattern = "^\\d+"
        ),
        ik2 = stringr::str_extract(
            string = ik, 
            pattern = "\\d+$"
        )
    ) |> 
    select(-ik)

dta_pivotik <-
    dta_mutateik |> 
    tidyr::pivot_longer(
        cols = c(ik1, ik2),
        names_to = "ik_val",
        values_to = "ik"
    ) |> 
    select(-ik_val) |> 
    distinct()
```

Puis avec de simples jointures je crée une table  unique. 

```r
dta_join <-
    dta_pivotik |> 
    left_join(
        y = dta_ght,
        by = join_by(pond >= lower_pond, pond < upper_pond)
    ) |> 
    left_join(
        y = dta_tarifs,
        by = "ght"
    )
```

J'ajoute les libellés pour une lecture plus facile

```r
dta_libs <- 
    dta_join |> 
    left_join(
        y = dta_libs_mps,
        by = c("mpp" = "code")
    ) |> 
    rename(libmpp = libmp) |> 
    left_join(
        y = dta_libs_mps,
        by = c("mpa" = "code")
    ) |> 
    rename(libmpa = libmp) |> 
    mutate(
        libmpp = paste0(mpp, " : ", libmpp),
        libmpa = paste0(mpa, " : ", libmpa),
        ik = as.integer(ik)
    )
```

Et ma table est prête à être utilisée. Je peux la sauvegarder dans un fichier Excel, ou mieux un fichier .rds qui prend moins de place et charge plus vite avec R :

```r
bdd <-
    dta_libs |> 
    select(
        mpp, libmpp, mpa, libmpa, ik, tranche, ghpc, ght, tarif_pub, tarif_pri, inat
    ) |> 
    arrange(
        mpp,
        mpa,
        ik,
        tranche
    )

saveRDS(bdd, "data/bdd.rds")
```

Ma table finale ressemble à ça : 

```{r}
#| echo: false
bdd <- readRDS('bdd.rds')
head(bdd, 3)
```

## Visualisation

Pour mettre ce tableau en page je vais utiliser `{flexdashboard}`, avec une disposition `sidebar` pour pouvoir mettre des elements à côté de la table. 

Je crée un fichier .Rmd avec l'entête suivant :

```yaml
---
title: "Calculette GHT HAD"
output:
    flexdashboard::flex_dashboard:
        vertical_layout: fill
        theme:
            version: 4
            bootswatch: cyborg
---
```

Je charge les librairies dont je vais avoir besoin :

``` {{r}}
#| include: false
library(htmltools)
library(shiny)
library(reactable)
library(reactablefmtr)
library(crosstalk)
library(hadcalculette)
library(flexdashboard)
```

Et je charge les données, et je les passe à `{crosstalk}` dans un objet partagé:

``` {{r}}
bdd <- readRDS("bdd.rds")
shared_bdd <- SharedData$new(bdd)
```

Ensuite, je voudrais pouvoir filtrer sur mes éléments d'interet : mpp mpa ik ght et tranche
J'utilise {crosstalk} pour faire communiquer des inputs avec la table.  

Je commence par créer la partie UI avec des filtres comme celui-ci :

``` {{r}}
filter_select(
    id = "mpp",
    label = "MPP",
    sharedData = shared_bdd,
    group = ~libmpp
)
```

Et de l'autre côté j'encapsule ma table dans un format réactif avec `{reactable}`>

Puis une fois satisfait je connecte avec les données du tableau pour qu'il soit filtré quand je fais des choix. 
NB: Il y a aussi des filtres puissants dans {reactable} mais je suis plus à l'aise visuellement avec mes filtres à gauche en menu déroulant plutôt que les filtres texte libre de {reactable}

Le code complet de cette portion est disponible [dans le dépôt](https://github.com/rsimonmd/calculettehad/blob/main/index.Rmd)

Et voilà le travail! 
Il n'y a plus qu'à déployer sur github pages ou équivalent

A bientôt,

Raphaël